Player,NetObject {
    #Socket Socket,Server;
    String Name;
    Position Position;
    Int Health;
    Int MaxHealth;
    Int Mana;
    Int MaxMana;
    Inventory Inventory;
    
    this.GetSyncSockets = #{
        List<Socket> s = new List<Socket>();
		
		
        foreach(var p in Main.players) {
			if(this.Socket.pid != p.Value.GetSocket().pid) {
				var p1 = Main.players[this.Socket.pid].GetPosition();
				var p2 = Main.players[p.Key].GetPosition();
			
				var d = Math.Abs(p1.GetX()-p2.GetX())+Math.Abs(p1.GetZ()-p2.GetZ());
			
				if(d < 30) {
					s.Add(p.Value.GetSocket());
				}
			}
        }
		
		s.Add(this.Socket);
		
        return s;
    }
}

Position {
    float X;
    float Y;
    float Z;
    
    float LastX,Server;
    float LastY,Server;
    float LastZ,Server;
    
    this.PreUpdate = #{
        this.LastX = this.X;
        this.LastY = this.Y;
        this.LastZ = this.Z;
    }
    
    this.PostUpdate = #{
        //check which sockets we need to send entire NetObject too
        
        //sync tiles !!!
		
		foreach(var p in Main.players) {
			if(((Player)this.parent).GetSocket().pid != p.Value.GetSocket().pid) {
				var p1 = Main.players[((Player)this.parent).GetSocket().pid].GetPosition();
				var p2 = Main.players[p.Key].GetPosition();
			
				var d1 = Math.Abs(p1.GetLastX()-p2.GetLastX())+Math.Abs(p1.GetLastZ()-p2.GetLastZ());
				var d2 = Math.Abs(p1.GetX()-p2.GetX())+Math.Abs(p1.GetZ()-p2.GetZ());
			
				if(d1 > 30 && d2 < 30) {
					//Sync entire object to socket
					this.parent.Write(p.Value.GetSocket(), p.Value.GetSocket().tickStream);
					p.Value.Write(((Player)this.parent).GetSocket(), ((Player)this.parent).GetSocket().tickStream);
				}
			}
        }
    }
}

Inventory {
    Item[] Items;
    int Coins;
    
    this.GetSyncSockets = #{
        List<Socket> s = new List<Socket>();
        s.Add(((Player)this.parent).GetSocket());
        return s;
    }
    
    this.SyncFilter = #{
        return socket.pid == ((Player)this.parent).GetSocket().pid;
    }
}

Item {
    int Itemid;
    int Subtype;
    int Count;
}